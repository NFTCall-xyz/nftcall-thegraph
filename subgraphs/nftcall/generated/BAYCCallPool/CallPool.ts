// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BalanceChangedETH extends ethereum.Event {
  get params(): BalanceChangedETH__Params {
    return new BalanceChangedETH__Params(this);
  }
}

export class BalanceChangedETH__Params {
  _event: BalanceChangedETH;

  constructor(event: BalanceChangedETH) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CallClosed extends ethereum.Event {
  get params(): CallClosed__Params {
    return new CallClosed__Params(this);
  }
}

export class CallClosed__Params {
  _event: CallClosed;

  constructor(event: CallClosed) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CallOpened extends ethereum.Event {
  get params(): CallOpened__Params {
    return new CallOpened__Params(this);
  }
}

export class CallOpened__Params {
  _event: CallOpened;

  constructor(event: CallOpened) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get strikePriceGap(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CollectProtocol extends ethereum.Event {
  get params(): CollectProtocol__Params {
    return new CollectProtocol__Params(this);
  }
}

export class CollectProtocol__Params {
  _event: CollectProtocol;

  constructor(event: CollectProtocol) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositETH extends ethereum.Event {
  get params(): DepositETH__Params {
    return new DepositETH__Params(this);
  }
}

export class DepositETH__Params {
  _event: DepositETH;

  constructor(event: DepositETH) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OffMarket extends ethereum.Event {
  get params(): OffMarket__Params {
    return new OffMarket__Params(this);
  }
}

export class OffMarket__Params {
  _event: OffMarket;

  constructor(event: OffMarket) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OnMarket extends ethereum.Event {
  get params(): OnMarket__Params {
    return new OnMarket__Params(this);
  }
}

export class OnMarket__Params {
  _event: OnMarket;

  constructor(event: OnMarket) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PreferenceUpdated extends ethereum.Event {
  get params(): PreferenceUpdated__Params {
    return new PreferenceUpdated__Params(this);
  }
}

export class PreferenceUpdated__Params {
  _event: PreferenceUpdated;

  constructor(event: PreferenceUpdated) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lowerStrikePriceGapIdx(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get upperDurationIdx(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get lowerLimitOfStrikePrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PremiumReceived extends ethereum.Event {
  get params(): PremiumReceived__Params {
    return new PremiumReceived__Params(this);
  }
}

export class PremiumReceived__Params {
  _event: PremiumReceived;

  constructor(event: PremiumReceived) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get premiumToOwner(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get premiumToReserve(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawETH extends ethereum.Event {
  get params(): WithdrawETH__Params {
    return new WithdrawETH__Params(this);
  }
}

export class WithdrawETH__Params {
  _event: WithdrawETH;

  constructor(event: WithdrawETH) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CallPool__getNFTStatusResult {
  value0: boolean;
  value1: boolean;
  value2: i32;
  value3: i32;
  value4: BigInt;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: i32,
    value3: i32,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): boolean {
    return this.value1;
  }

  getValue2(): i32 {
    return this.value2;
  }

  getValue3(): i32 {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }
}

export class CallPool__previewOpenCallResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getStrikePrice(): BigInt {
    return this.value0;
  }

  getPremiumToOwner(): BigInt {
    return this.value1;
  }

  getPremiumToReserve(): BigInt {
    return this.value2;
  }

  getErrorCode(): BigInt {
    return this.value3;
  }
}

export class CallPool extends ethereum.SmartContract {
  static bind(address: Address): CallPool {
    return new CallPool("CallPool", address);
  }

  INVALID_PRICE(): BigInt {
    let result = super.call("INVALID_PRICE", "INVALID_PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_INVALID_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INVALID_PRICE",
      "INVALID_PRICE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(user: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  callToken(): Address {
    let result = super.call("callToken", "callToken():(address)", []);

    return result[0].toAddress();
  }

  try_callToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("callToken", "callToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkAvailable(tokenId: BigInt): boolean {
    let result = super.call(
      "checkAvailable",
      "checkAvailable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBoolean();
  }

  try_checkAvailable(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkAvailable",
      "checkAvailable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  collectProtocol(recipient: Address, amountRequested: BigInt): BigInt {
    let result = super.call(
      "collectProtocol",
      "collectProtocol(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amountRequested)
      ]
    );

    return result[0].toBigInt();
  }

  try_collectProtocol(
    recipient: Address,
    amountRequested: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectProtocol",
      "collectProtocol(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amountRequested)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exercisePeriodProportion(): i32 {
    let result = super.call(
      "exercisePeriodProportion",
      "exercisePeriodProportion():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_exercisePeriodProportion(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "exercisePeriodProportion",
      "exercisePeriodProportion():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNFTStatus(tokenId: BigInt): CallPool__getNFTStatusResult {
    let result = super.call(
      "getNFTStatus",
      "getNFTStatus(uint256):(bool,bool,uint8,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new CallPool__getNFTStatusResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBigInt()
    );
  }

  try_getNFTStatus(
    tokenId: BigInt
  ): ethereum.CallResult<CallPool__getNFTStatusResult> {
    let result = super.tryCall(
      "getNFTStatus",
      "getNFTStatus(uint256):(bool,bool,uint8,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CallPool__getNFTStatusResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBigInt()
      )
    );
  }

  minimumPremiumToOwner(): BigInt {
    let result = super.call(
      "minimumPremiumToOwner",
      "minimumPremiumToOwner():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumPremiumToOwner(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumPremiumToOwner",
      "minimumPremiumToOwner():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nToken(): Address {
    let result = super.call("nToken", "nToken():(address)", []);

    return result[0].toAddress();
  }

  try_nToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("nToken", "nToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nft(): Address {
    let result = super.call("nft", "nft():(address)", []);

    return result[0].toAddress();
  }

  try_nft(): ethereum.CallResult<Address> {
    let result = super.tryCall("nft", "nft():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  premium(): Address {
    let result = super.call("premium", "premium():(address)", []);

    return result[0].toAddress();
  }

  try_premium(): ethereum.CallResult<Address> {
    let result = super.tryCall("premium", "premium():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  previewOpenCall(
    tokenId: BigInt,
    strikePriceGapIdx: BigInt,
    durationIdx: BigInt
  ): CallPool__previewOpenCallResult {
    let result = super.call(
      "previewOpenCall",
      "previewOpenCall(uint256,uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(strikePriceGapIdx),
        ethereum.Value.fromUnsignedBigInt(durationIdx)
      ]
    );

    return new CallPool__previewOpenCallResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_previewOpenCall(
    tokenId: BigInt,
    strikePriceGapIdx: BigInt,
    durationIdx: BigInt
  ): ethereum.CallResult<CallPool__previewOpenCallResult> {
    let result = super.tryCall(
      "previewOpenCall",
      "previewOpenCall(uint256,uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(strikePriceGapIdx),
        ethereum.Value.fromUnsignedBigInt(durationIdx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CallPool__previewOpenCallResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  totalOpenInterest(): BigInt {
    let result = super.call(
      "totalOpenInterest",
      "totalOpenInterest():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalOpenInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalOpenInterest",
      "totalOpenInterest():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawETH(to: Address, amount: BigInt): BigInt {
    let result = super.call(
      "withdrawETH",
      "withdrawETH(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawETH(to: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawETH",
      "withdrawETH(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangePreferenceCall extends ethereum.Call {
  get inputs(): ChangePreferenceCall__Inputs {
    return new ChangePreferenceCall__Inputs(this);
  }

  get outputs(): ChangePreferenceCall__Outputs {
    return new ChangePreferenceCall__Outputs(this);
  }
}

export class ChangePreferenceCall__Inputs {
  _call: ChangePreferenceCall;

  constructor(call: ChangePreferenceCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lowerStrikePriceGapIdx(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get upperDurationIdx(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get lowerLimitOfStrikePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ChangePreferenceCall__Outputs {
  _call: ChangePreferenceCall;

  constructor(call: ChangePreferenceCall) {
    this._call = call;
  }
}

export class CollectProtocolCall extends ethereum.Call {
  get inputs(): CollectProtocolCall__Inputs {
    return new CollectProtocolCall__Inputs(this);
  }

  get outputs(): CollectProtocolCall__Outputs {
    return new CollectProtocolCall__Outputs(this);
  }
}

export class CollectProtocolCall__Inputs {
  _call: CollectProtocolCall;

  constructor(call: CollectProtocolCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountRequested(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CollectProtocolCall__Outputs {
  _call: CollectProtocolCall;

  constructor(call: CollectProtocolCall) {
    this._call = call;
  }

  get amountSent(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositWithPreferenceCall extends ethereum.Call {
  get inputs(): DepositWithPreferenceCall__Inputs {
    return new DepositWithPreferenceCall__Inputs(this);
  }

  get outputs(): DepositWithPreferenceCall__Outputs {
    return new DepositWithPreferenceCall__Outputs(this);
  }
}

export class DepositWithPreferenceCall__Inputs {
  _call: DepositWithPreferenceCall;

  constructor(call: DepositWithPreferenceCall) {
    this._call = call;
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lowerStrikePriceGapIdx(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get upperDurationIdx(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get lowerLimitOfStrikePrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class DepositWithPreferenceCall__Outputs {
  _call: DepositWithPreferenceCall;

  constructor(call: DepositWithPreferenceCall) {
    this._call = call;
  }
}

export class ExerciseCallCall extends ethereum.Call {
  get inputs(): ExerciseCallCall__Inputs {
    return new ExerciseCallCall__Inputs(this);
  }

  get outputs(): ExerciseCallCall__Outputs {
    return new ExerciseCallCall__Outputs(this);
  }
}

export class ExerciseCallCall__Inputs {
  _call: ExerciseCallCall;

  constructor(call: ExerciseCallCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExerciseCallCall__Outputs {
  _call: ExerciseCallCall;

  constructor(call: ExerciseCallCall) {
    this._call = call;
  }
}

export class OpenCallCall extends ethereum.Call {
  get inputs(): OpenCallCall__Inputs {
    return new OpenCallCall__Inputs(this);
  }

  get outputs(): OpenCallCall__Outputs {
    return new OpenCallCall__Outputs(this);
  }
}

export class OpenCallCall__Inputs {
  _call: OpenCallCall;

  constructor(call: OpenCallCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get strikePriceGapIdx(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get durationIdx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OpenCallCall__Outputs {
  _call: OpenCallCall;

  constructor(call: OpenCallCall) {
    this._call = call;
  }
}

export class OpenCallBatchCall extends ethereum.Call {
  get inputs(): OpenCallBatchCall__Inputs {
    return new OpenCallBatchCall__Inputs(this);
  }

  get outputs(): OpenCallBatchCall__Outputs {
    return new OpenCallBatchCall__Outputs(this);
  }
}

export class OpenCallBatchCall__Inputs {
  _call: OpenCallBatchCall;

  constructor(call: OpenCallBatchCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get strikePriceGaps(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get durations(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class OpenCallBatchCall__Outputs {
  _call: OpenCallBatchCall;

  constructor(call: OpenCallBatchCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RelistNFTCall extends ethereum.Call {
  get inputs(): RelistNFTCall__Inputs {
    return new RelistNFTCall__Inputs(this);
  }

  get outputs(): RelistNFTCall__Outputs {
    return new RelistNFTCall__Outputs(this);
  }
}

export class RelistNFTCall__Inputs {
  _call: RelistNFTCall;

  constructor(call: RelistNFTCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RelistNFTCall__Outputs {
  _call: RelistNFTCall;

  constructor(call: RelistNFTCall) {
    this._call = call;
  }
}

export class TakeNFTOffMarketCall extends ethereum.Call {
  get inputs(): TakeNFTOffMarketCall__Inputs {
    return new TakeNFTOffMarketCall__Inputs(this);
  }

  get outputs(): TakeNFTOffMarketCall__Outputs {
    return new TakeNFTOffMarketCall__Outputs(this);
  }
}

export class TakeNFTOffMarketCall__Inputs {
  _call: TakeNFTOffMarketCall;

  constructor(call: TakeNFTOffMarketCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TakeNFTOffMarketCall__Outputs {
  _call: TakeNFTOffMarketCall;

  constructor(call: TakeNFTOffMarketCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawETHCall extends ethereum.Call {
  get inputs(): WithdrawETHCall__Inputs {
    return new WithdrawETHCall__Inputs(this);
  }

  get outputs(): WithdrawETHCall__Outputs {
    return new WithdrawETHCall__Outputs(this);
  }
}

export class WithdrawETHCall__Inputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawETHCall__Outputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
