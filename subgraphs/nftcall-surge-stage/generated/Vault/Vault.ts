// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActivateMarket extends ethereum.Event {
  get params(): ActivateMarket__Params {
    return new ActivateMarket__Params(this);
  }
}

export class ActivateMarket__Params {
  _event: ActivateMarket;

  constructor(event: ActivateMarket) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collection(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CreateMarket extends ethereum.Event {
  get params(): CreateMarket__Params {
    return new CreateMarket__Params(this);
  }
}

export class CreateMarket__Params {
  _event: CreateMarket;

  constructor(event: CreateMarket) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get weight(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get optionToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CreateStrike extends ethereum.Event {
  get params(): CreateStrike__Params {
    return new CreateStrike__Params(this);
  }
}

export class CreateStrike__Params {
  _event: CreateStrike;

  constructor(event: CreateStrike) {
    this._event = event;
  }

  get strikeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get spotPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get strikePrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DeactivateMarket extends ethereum.Event {
  get params(): DeactivateMarket__Params {
    return new DeactivateMarket__Params(this);
  }
}

export class DeactivateMarket__Params {
  _event: DeactivateMarket;

  constructor(event: DeactivateMarket) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collection(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DefreezeMarket extends ethereum.Event {
  get params(): DefreezeMarket__Params {
    return new DefreezeMarket__Params(this);
  }
}

export class DefreezeMarket__Params {
  _event: DefreezeMarket;

  constructor(event: DefreezeMarket) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collection(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DestoryStrike extends ethereum.Event {
  get params(): DestoryStrike__Params {
    return new DestoryStrike__Params(this);
  }
}

export class DestoryStrike__Params {
  _event: DestoryStrike;

  constructor(event: DestoryStrike) {
    this._event = event;
  }

  get strikeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FreezeMarket extends ethereum.Event {
  get params(): FreezeMarket__Params {
    return new FreezeMarket__Params(this);
  }
}

export class FreezeMarket__Params {
  _event: FreezeMarket;

  constructor(event: FreezeMarket) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collection(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class KeeperAddressUpdated extends ethereum.Event {
  get params(): KeeperAddressUpdated__Params {
    return new KeeperAddressUpdated__Params(this);
  }
}

export class KeeperAddressUpdated__Params {
  _event: KeeperAddressUpdated;

  constructor(event: KeeperAddressUpdated) {
    this._event = event;
  }

  get keeperAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OpenPosition extends ethereum.Event {
  get params(): OpenPosition__Params {
    return new OpenPosition__Params(this);
  }
}

export class OpenPosition__Params {
  _event: OpenPosition;

  constructor(event: OpenPosition) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strikeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get positionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get estimatedPremium(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PauseVault extends ethereum.Event {
  get params(): PauseVault__Params {
    return new PauseVault__Params(this);
  }
}

export class PauseVault__Params {
  _event: PauseVault;

  constructor(event: PauseVault) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReceiveKeeperFee extends ethereum.Event {
  get params(): ReceiveKeeperFee__Params {
    return new ReceiveKeeperFee__Params(this);
  }
}

export class ReceiveKeeperFee__Params {
  _event: ReceiveKeeperFee;

  constructor(event: ReceiveKeeperFee) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReceivePremium extends ethereum.Event {
  get params(): ReceivePremium__Params {
    return new ReceivePremium__Params(this);
  }
}

export class ReceivePremium__Params {
  _event: ReceivePremium;

  constructor(event: ReceivePremium) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountToReserve(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountToLiquidityPool(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ReceivePremiumAndFee extends ethereum.Event {
  get params(): ReceivePremiumAndFee__Params {
    return new ReceivePremiumAndFee__Params(this);
  }
}

export class ReceivePremiumAndFee__Params {
  _event: ReceivePremiumAndFee;

  constructor(event: ReceivePremiumAndFee) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get premium(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ReturnExcessPremium extends ethereum.Event {
  get params(): ReturnExcessPremium__Params {
    return new ReturnExcessPremium__Params(this);
  }
}

export class ReturnExcessPremium__Params {
  _event: ReturnExcessPremium;

  constructor(event: ReturnExcessPremium) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get returnedPremium(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SendRevenue extends ethereum.Event {
  get params(): SendRevenue__Params {
    return new SendRevenue__Params(this);
  }
}

export class SendRevenue__Params {
  _event: SendRevenue;

  constructor(event: SendRevenue) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnpauseVault extends ethereum.Event {
  get params(): UnpauseVault__Params {
    return new UnpauseVault__Params(this);
  }
}

export class UnpauseVault__Params {
  _event: UnpauseVault;

  constructor(event: UnpauseVault) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateLPTokenPrice extends ethereum.Event {
  get params(): UpdateLPTokenPrice__Params {
    return new UpdateLPTokenPrice__Params(this);
  }
}

export class UpdateLPTokenPrice__Params {
  _event: UpdateLPTokenPrice;

  constructor(event: UpdateLPTokenPrice) {
    this._event = event;
  }

  get lpToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UserCancelPosition extends ethereum.Event {
  get params(): UserCancelPosition__Params {
    return new UserCancelPosition__Params(this);
  }
}

export class UserCancelPosition__Params {
  _event: UserCancelPosition;

  constructor(event: UserCancelPosition) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Vault__marketConfigurationResultValue0Struct extends ethereum.Tuple {
  get frozen(): boolean {
    return this[0].toBoolean();
  }

  get activated(): boolean {
    return this[1].toBoolean();
  }

  get id(): BigInt {
    return this[2].toBigInt();
  }

  get weight(): BigInt {
    return this[3].toBigInt();
  }

  get optionToken(): Address {
    return this[4].toAddress();
  }
}

export class Vault__openPositionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPositionId(): BigInt {
    return this.value0;
  }

  getPremium(): BigInt {
    return this.value1;
  }
}

export class Vault__strikeResultSStruct extends ethereum.Tuple {
  get spotPrice(): BigInt {
    return this[0].toBigInt();
  }

  get strikePrice(): BigInt {
    return this[1].toBigInt();
  }

  get duration(): BigInt {
    return this[2].toBigInt();
  }

  get expiry(): BigInt {
    return this[3].toBigInt();
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  KEEPER_FEE(): BigInt {
    let result = super.call("KEEPER_FEE", "KEEPER_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_KEEPER_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("KEEPER_FEE", "KEEPER_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAXIMUM_CALL_STRIKE_PRICE_RATIO(): BigInt {
    let result = super.call(
      "MAXIMUM_CALL_STRIKE_PRICE_RATIO",
      "MAXIMUM_CALL_STRIKE_PRICE_RATIO():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAXIMUM_CALL_STRIKE_PRICE_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAXIMUM_CALL_STRIKE_PRICE_RATIO",
      "MAXIMUM_CALL_STRIKE_PRICE_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAXIMUM_DURATION(): BigInt {
    let result = super.call(
      "MAXIMUM_DURATION",
      "MAXIMUM_DURATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAXIMUM_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAXIMUM_DURATION",
      "MAXIMUM_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAXIMUM_LOCK_RATIO(): BigInt {
    let result = super.call(
      "MAXIMUM_LOCK_RATIO",
      "MAXIMUM_LOCK_RATIO():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAXIMUM_LOCK_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAXIMUM_LOCK_RATIO",
      "MAXIMUM_LOCK_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAXIMUM_PUT_STRIKE_PRICE_RATIO(): BigInt {
    let result = super.call(
      "MAXIMUM_PUT_STRIKE_PRICE_RATIO",
      "MAXIMUM_PUT_STRIKE_PRICE_RATIO():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAXIMUM_PUT_STRIKE_PRICE_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAXIMUM_PUT_STRIKE_PRICE_RATIO",
      "MAXIMUM_PUT_STRIKE_PRICE_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_CALL_STRIKE_PRICE_RATIO(): BigInt {
    let result = super.call(
      "MINIMUM_CALL_STRIKE_PRICE_RATIO",
      "MINIMUM_CALL_STRIKE_PRICE_RATIO():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_CALL_STRIKE_PRICE_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_CALL_STRIKE_PRICE_RATIO",
      "MINIMUM_CALL_STRIKE_PRICE_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_DURATION(): BigInt {
    let result = super.call(
      "MINIMUM_DURATION",
      "MINIMUM_DURATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_DURATION",
      "MINIMUM_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_PUT_STRIKE_PRICE_RATIO(): BigInt {
    let result = super.call(
      "MINIMUM_PUT_STRIKE_PRICE_RATIO",
      "MINIMUM_PUT_STRIKE_PRICE_RATIO():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_PUT_STRIKE_PRICE_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_PUT_STRIKE_PRICE_RATIO",
      "MINIMUM_PUT_STRIKE_PRICE_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RESERVE_RATIO(): BigInt {
    let result = super.call("RESERVE_RATIO", "RESERVE_RATIO():(uint256)", []);

    return result[0].toBigInt();
  }

  try_RESERVE_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RESERVE_RATIO",
      "RESERVE_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activePosition(collection: Address, positionId: BigInt): BigInt {
    let result = super.call(
      "activePosition",
      "activePosition(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(positionId)
      ]
    );

    return result[0].toBigInt();
  }

  try_activePosition(
    collection: Address,
    positionId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activePosition",
      "activePosition(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(positionId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addMarket(collection: Address, weight: BigInt, optionToken: Address): BigInt {
    let result = super.call(
      "addMarket",
      "addMarket(address,uint32,address):(uint32)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(weight),
        ethereum.Value.fromAddress(optionToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_addMarket(
    collection: Address,
    weight: BigInt,
    optionToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addMarket",
      "addMarket(address,uint32,address):(uint32)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(weight),
        ethereum.Value.fromAddress(optionToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  backstopPool(): Address {
    let result = super.call("backstopPool", "backstopPool():(address)", []);

    return result[0].toAddress();
  }

  try_backstopPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("backstopPool", "backstopPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  closePosition(collection: Address, positionId: BigInt): BigInt {
    let result = super.call(
      "closePosition",
      "closePosition(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(positionId)
      ]
    );

    return result[0].toBigInt();
  }

  try_closePosition(
    collection: Address,
    positionId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "closePosition",
      "closePosition(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(positionId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimatePremium(
    collection: Address,
    optionType: i32,
    strikePrice: BigInt,
    expiry: BigInt,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "estimatePremium",
      "estimatePremium(address,uint8,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType)),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_estimatePremium(
    collection: Address,
    optionType: i32,
    strikePrice: BigInt,
    expiry: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatePremium",
      "estimatePremium(address,uint8,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType)),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeRatio(): BigInt {
    let result = super.call("feeRatio", "feeRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeRatio", "feeRatio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActiveMarket(collection: Address): boolean {
    let result = super.call(
      "isActiveMarket",
      "isActiveMarket(address):(bool)",
      [ethereum.Value.fromAddress(collection)]
    );

    return result[0].toBoolean();
  }

  try_isActiveMarket(collection: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isActiveMarket",
      "isActiveMarket(address):(bool)",
      [ethereum.Value.fromAddress(collection)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFrozenMarket(collection: Address): boolean {
    let result = super.call(
      "isFrozenMarket",
      "isFrozenMarket(address):(bool)",
      [ethereum.Value.fromAddress(collection)]
    );

    return result[0].toBoolean();
  }

  try_isFrozenMarket(collection: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isFrozenMarket",
      "isFrozenMarket(address):(bool)",
      [ethereum.Value.fromAddress(collection)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeper(): Address {
    let result = super.call("keeper", "keeper():(address)", []);

    return result[0].toAddress();
  }

  try_keeper(): ethereum.CallResult<Address> {
    let result = super.tryCall("keeper", "keeper():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  marketConfiguration(
    collection: Address
  ): Vault__marketConfigurationResultValue0Struct {
    let result = super.call(
      "marketConfiguration",
      "marketConfiguration(address):((bool,bool,uint32,uint32,address))",
      [ethereum.Value.fromAddress(collection)]
    );

    return changetype<Vault__marketConfigurationResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_marketConfiguration(
    collection: Address
  ): ethereum.CallResult<Vault__marketConfigurationResultValue0Struct> {
    let result = super.tryCall(
      "marketConfiguration",
      "marketConfiguration(address):((bool,bool,uint32,uint32,address))",
      [ethereum.Value.fromAddress(collection)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__marketConfigurationResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  markets(): Array<Address> {
    let result = super.call("markets", "markets():(address[])", []);

    return result[0].toAddressArray();
  }

  try_markets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("markets", "markets():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  maximumOptionAmount(collection: Address, optionType: i32): BigInt {
    let result = super.call(
      "maximumOptionAmount",
      "maximumOptionAmount(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType))
      ]
    );

    return result[0].toBigInt();
  }

  try_maximumOptionAmount(
    collection: Address,
    optionType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maximumOptionAmount",
      "maximumOptionAmount(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  openPosition(
    collection: Address,
    onBehalfOf: Address,
    optionType: i32,
    strikePrice: BigInt,
    expiry: BigInt,
    amount: BigInt,
    maximumPremium: BigInt
  ): Vault__openPositionResult {
    let result = super.call(
      "openPosition",
      "openPosition(address,address,uint8,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType)),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(maximumPremium)
      ]
    );

    return new Vault__openPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_openPosition(
    collection: Address,
    onBehalfOf: Address,
    optionType: i32,
    strikePrice: BigInt,
    expiry: BigInt,
    amount: BigInt,
    maximumPremium: BigInt
  ): ethereum.CallResult<Vault__openPositionResult> {
    let result = super.tryCall(
      "openPosition",
      "openPosition(address,address,uint8,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType)),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(maximumPremium)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__openPositionResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  profitFeeRatio(): BigInt {
    let result = super.call("profitFeeRatio", "profitFeeRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_profitFeeRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "profitFeeRatio",
      "profitFeeRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserve(): Address {
    let result = super.call("reserve", "reserve():(address)", []);

    return result[0].toAddress();
  }

  try_reserve(): ethereum.CallResult<Address> {
    let result = super.tryCall("reserve", "reserve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  strike(strikeId: BigInt): Vault__strikeResultSStruct {
    let result = super.call(
      "strike",
      "strike(uint256):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(strikeId)]
    );

    return changetype<Vault__strikeResultSStruct>(result[0].toTuple());
  }

  try_strike(
    strikeId: BigInt
  ): ethereum.CallResult<Vault__strikeResultSStruct> {
    let result = super.tryCall(
      "strike",
      "strike(uint256):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(strikeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__strikeResultSStruct>(value[0].toTuple())
    );
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLockedAssets(): BigInt {
    let result = super.call(
      "totalLockedAssets",
      "totalLockedAssets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalLockedAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLockedAssets",
      "totalLockedAssets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unrealizedPNL(): BigInt {
    let result = super.call("unrealizedPNL", "unrealizedPNL():(int256)", []);

    return result[0].toBigInt();
  }

  try_unrealizedPNL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("unrealizedPNL", "unrealizedPNL():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unrealizedPremium(): BigInt {
    let result = super.call(
      "unrealizedPremium",
      "unrealizedPremium():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_unrealizedPremium(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unrealizedPremium",
      "unrealizedPremium():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateUnrealizedPNL(): BigInt {
    let result = super.call(
      "updateUnrealizedPNL",
      "updateUnrealizedPNL():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_updateUnrealizedPNL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateUnrealizedPNL",
      "updateUnrealizedPNL():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(amount: BigInt, to: Address): BigInt {
    let result = super.call("withdraw", "withdraw(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromAddress(to)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(amount: BigInt, to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get pricer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get riskCache(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get reserve_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get backstopPool_(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActivateMarketCall extends ethereum.Call {
  get inputs(): ActivateMarketCall__Inputs {
    return new ActivateMarketCall__Inputs(this);
  }

  get outputs(): ActivateMarketCall__Outputs {
    return new ActivateMarketCall__Outputs(this);
  }
}

export class ActivateMarketCall__Inputs {
  _call: ActivateMarketCall;

  constructor(call: ActivateMarketCall) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ActivateMarketCall__Outputs {
  _call: ActivateMarketCall;

  constructor(call: ActivateMarketCall) {
    this._call = call;
  }
}

export class ActivePositionCall extends ethereum.Call {
  get inputs(): ActivePositionCall__Inputs {
    return new ActivePositionCall__Inputs(this);
  }

  get outputs(): ActivePositionCall__Outputs {
    return new ActivePositionCall__Outputs(this);
  }
}

export class ActivePositionCall__Inputs {
  _call: ActivePositionCall;

  constructor(call: ActivePositionCall) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get positionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ActivePositionCall__Outputs {
  _call: ActivePositionCall;

  constructor(call: ActivePositionCall) {
    this._call = call;
  }

  get premium(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddMarketCall extends ethereum.Call {
  get inputs(): AddMarketCall__Inputs {
    return new AddMarketCall__Inputs(this);
  }

  get outputs(): AddMarketCall__Outputs {
    return new AddMarketCall__Outputs(this);
  }
}

export class AddMarketCall__Inputs {
  _call: AddMarketCall;

  constructor(call: AddMarketCall) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get optionToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddMarketCall__Outputs {
  _call: AddMarketCall;

  constructor(call: AddMarketCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClosePositionCall extends ethereum.Call {
  get inputs(): ClosePositionCall__Inputs {
    return new ClosePositionCall__Inputs(this);
  }

  get outputs(): ClosePositionCall__Outputs {
    return new ClosePositionCall__Outputs(this);
  }
}

export class ClosePositionCall__Inputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get positionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClosePositionCall__Outputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }

  get profit(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DeactivateMarketCall extends ethereum.Call {
  get inputs(): DeactivateMarketCall__Inputs {
    return new DeactivateMarketCall__Inputs(this);
  }

  get outputs(): DeactivateMarketCall__Outputs {
    return new DeactivateMarketCall__Outputs(this);
  }
}

export class DeactivateMarketCall__Inputs {
  _call: DeactivateMarketCall;

  constructor(call: DeactivateMarketCall) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeactivateMarketCall__Outputs {
  _call: DeactivateMarketCall;

  constructor(call: DeactivateMarketCall) {
    this._call = call;
  }
}

export class DefreezeMarketCall extends ethereum.Call {
  get inputs(): DefreezeMarketCall__Inputs {
    return new DefreezeMarketCall__Inputs(this);
  }

  get outputs(): DefreezeMarketCall__Outputs {
    return new DefreezeMarketCall__Outputs(this);
  }
}

export class DefreezeMarketCall__Inputs {
  _call: DefreezeMarketCall;

  constructor(call: DefreezeMarketCall) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DefreezeMarketCall__Outputs {
  _call: DefreezeMarketCall;

  constructor(call: DefreezeMarketCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class ForceClosePendingPositionCall extends ethereum.Call {
  get inputs(): ForceClosePendingPositionCall__Inputs {
    return new ForceClosePendingPositionCall__Inputs(this);
  }

  get outputs(): ForceClosePendingPositionCall__Outputs {
    return new ForceClosePendingPositionCall__Outputs(this);
  }
}

export class ForceClosePendingPositionCall__Inputs {
  _call: ForceClosePendingPositionCall;

  constructor(call: ForceClosePendingPositionCall) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get positionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ForceClosePendingPositionCall__Outputs {
  _call: ForceClosePendingPositionCall;

  constructor(call: ForceClosePendingPositionCall) {
    this._call = call;
  }
}

export class FreezeMarketCall extends ethereum.Call {
  get inputs(): FreezeMarketCall__Inputs {
    return new FreezeMarketCall__Inputs(this);
  }

  get outputs(): FreezeMarketCall__Outputs {
    return new FreezeMarketCall__Outputs(this);
  }
}

export class FreezeMarketCall__Inputs {
  _call: FreezeMarketCall;

  constructor(call: FreezeMarketCall) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FreezeMarketCall__Outputs {
  _call: FreezeMarketCall;

  constructor(call: FreezeMarketCall) {
    this._call = call;
  }
}

export class OpenPositionCall extends ethereum.Call {
  get inputs(): OpenPositionCall__Inputs {
    return new OpenPositionCall__Inputs(this);
  }

  get outputs(): OpenPositionCall__Outputs {
    return new OpenPositionCall__Outputs(this);
  }
}

export class OpenPositionCall__Inputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get optionType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get strikePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get maximumPremium(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class OpenPositionCall__Outputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get premium(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetKeeperCall extends ethereum.Call {
  get inputs(): SetKeeperCall__Inputs {
    return new SetKeeperCall__Inputs(this);
  }

  get outputs(): SetKeeperCall__Outputs {
    return new SetKeeperCall__Outputs(this);
  }
}

export class SetKeeperCall__Inputs {
  _call: SetKeeperCall;

  constructor(call: SetKeeperCall) {
    this._call = call;
  }

  get keeperAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetKeeperCall__Outputs {
  _call: SetKeeperCall;

  constructor(call: SetKeeperCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateUnrealizedPNLCall extends ethereum.Call {
  get inputs(): UpdateUnrealizedPNLCall__Inputs {
    return new UpdateUnrealizedPNLCall__Inputs(this);
  }

  get outputs(): UpdateUnrealizedPNLCall__Outputs {
    return new UpdateUnrealizedPNLCall__Outputs(this);
  }
}

export class UpdateUnrealizedPNLCall__Inputs {
  _call: UpdateUnrealizedPNLCall;

  constructor(call: UpdateUnrealizedPNLCall) {
    this._call = call;
  }
}

export class UpdateUnrealizedPNLCall__Outputs {
  _call: UpdateUnrealizedPNLCall;

  constructor(call: UpdateUnrealizedPNLCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
